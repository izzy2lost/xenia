name: Xenia Canary UWP Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'Xenia-Canary-UWP'

jobs:
  build:
    runs-on: windows-2022
    
    env:
      ProjectPath: xenia-canary-uwp/xenia-canary-uwp.vcxproj
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never      
      ProjectDirectory: .\xenia-canary-uwp
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: Xenia-Canary

    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
          ref: canary_experimental

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      - name: Download and Setup Premake5
        run: |
          Invoke-WebRequest -Uri "https://github.com/premake/premake-core/releases/download/v5.0.0-alpha15/premake-5.0.0-alpha15-windows.zip" -OutFile "premake5.zip"
          Expand-Archive premake5.zip -DestinationPath .\premake5
          $Env:Path += ";$PWD\premake5"
        shell: pwsh

      - name: Run xb devenv
        run: |
          Invoke-Expression -Command "./xb devenv"
        shell: pwsh

      - name: Run xb premake
        run: |
          Invoke-Expression -Command "./xb premake"
        shell: pwsh

      - name: Add Xenia-Canary-UWP to Solution
        run: |
          # Assuming this step is manual, skipping it
        shell: pwsh

      - name: Remove file_picker.win.cc
        run: |
          Remove-Item -Path "path\to\file_picker.win.cc"
        shell: pwsh

      - name: Remove zstd from Solution
        run: |
          # Assuming this step is manual, skipping it
        shell: pwsh

      - name: Add zstd.vcxproj
        run: |
          # Assuming this step is manual, skipping it
        shell: pwsh

      - name: Retarget zstd for Latest Visual Studio
        run: |
          # Assuming this step is manual, skipping it
        shell: pwsh

      - name: Add zstd to zarchive References
        run: |
          # Assuming this step is manual, skipping it
        shell: pwsh

      - name: Remove zstd.rc
        run: |
          Remove-Item -Path "third_party\zstd\build\VS2010\zstd\zstd.rc"
        shell: pwsh

      - name: Compile Solution
        run: |
          msbuild xenia.sln /p:Configuration=Release /p:Platform=x64 /t:build /p:PlatformToolset=v143
        shell: pwsh

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: App Build
        run: |
          msbuild $env:ProjectPath `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}" `
            /restore
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh
       
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip
